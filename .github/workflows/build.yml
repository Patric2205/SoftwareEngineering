name: Maven Build

on:
  push:          # bei jedem Push ausführen
  pull_request:  # zusätzlich bei Pull Requests prüfen

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build and Test with Maven
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 25 (Oracle)
        uses: actions/setup-java@v4
        with:
          distribution: oracle
          java-version: '25'
          cache: maven

      - name: Verify Maven Wrapper or Install Maven
        run: |
          if [ -f "./mvnw" ]; then
            echo "Maven Wrapper gefunden"
            chmod +x mvnw
          else
            echo "Kein Maven Wrapper gefunden, benutze System-Maven"
          fi

      - name: Build with Maven
        run: |
          if [ -f "./mvnw" ]; then
            ./mvnw -B clean install
          else
            mvn -B clean install
          fi

      - name: Run Maven Verify
        run: |
          if [ -f "./mvnw" ]; then
            ./mvnw -B verify
          else
            mvn -B verify
          fi

      - name: Upload test reports (falls vorhanden)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports

      - name: Build Docker image
        uses: whoan/docker-build-with-cache-action@v8
        with:
          username: ${{ github.actor }}
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: ${{ env.REGISTRY }}
          image_name: "patric2205/softwareengineering"


  deploy:
            runs-on: ubuntu-latest
            needs: build
            steps:
              - name: Checkout repository
                uses: actions/checkout@v4

              - name: Log in to GHCR
                run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

              - name: Pull Docker image
                run: docker pull ghcr.io/${{ github.repository }}:latest

              - name: Run container
                run: |
                  docker run -d -p 8080:8080 --name myapi ghcr.io/${{ github.repository }}:latest
                  # Wait for container to be ready
                  sleep 5

              - name: Check container is running
                run: |
                  docker ps
                  curl -f http://localhost:8080/health || echo "Container not ready yet"

              - name: Install Cloudflare Tunnel
                run: |
                  wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
                  sudo dpkg -i cloudflared-linux-amd64.deb

              - name: Start Cloudflare Tunnel
                run: |
                  echo "Starting Cloudflare Tunnel..."
                  cloudflared tunnel --no-autoupdate --loglevel info --url http://localhost:8080 > tunnel.log 2>&1 &
                  TUNNEL_PID=$!
                  echo "TUNNEL_PID=$TUNNEL_PID" >> $GITHUB_ENV
                  echo "Tunnel PID: $TUNNEL_PID"
                  
                  # Wait for tunnel to establish
                  echo "Waiting for tunnel to establish..."
                  for i in {1..30}; do
                    sleep 1
                    if grep -qE "https://[a-z0-9-]+\.trycloudflare\.com" tunnel.log 2>/dev/null; then
                      echo "Tunnel established after $i seconds"
                      break
                    fi
                  done
                  
                  echo "======================================"
                  cat tunnel.log
                  echo "======================================"
                  
                  PUBLIC_URL=$(grep -oE 'https://[a-z0-9-]+\.trycloudflare\.com' tunnel.log | head -1)
                  if [ -z "$PUBLIC_URL" ]; then
                    echo "❌ Could not extract public URL from tunnel log"
                    PUBLIC_URL="Check tunnel log above"
                  fi
                  
                  echo "PUBLIC_URL=$PUBLIC_URL" >> $GITHUB_ENV

              - name: Show container logs
                run: |
                  echo "======================================"
                  echo "Container logs:"
                  docker logs myapi
                  echo "======================================"

              - name: Keep alive for 10 minutes
                run: |
                  echo "Keeping the workflow alive for 10 minutes..."
                  echo "Test your API at: $PUBLIC_URL"
                  
                  # Keep alive and show logs every 30 seconds
                  for i in {1..20}; do
                    echo "⏰ Time remaining: $((10 - i/2)) minutes..."
                  
                    # Check if tunnel is still running
                    if ! kill -0 $TUNNEL_PID 2>/dev/null; then
                      echo "⚠️  Tunnel process died unexpectedly!"
                      cat tunnel.log
                    fi
                  
                    sleep 30
                  
                    # Show recent container logs
                    echo "Recent logs:"
                    docker logs --tail 20 myapi
                  done

              - name: Cleanup
                if: always()
                run: |
                  docker stop myapi || true
                  docker rm myapi || true
                  kill $TUNNEL_PID || true

